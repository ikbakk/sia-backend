// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum AcademicYear {
  GENAP
  GANJIL
}

model Student {
  id                  String        @id @default(cuid()) @map("_id")
  studentID           String        @unique
  firstName           String
  lastName            String
  email               String        @unique
  password            String
  role                Role          @default(STUDENT)
  completedCourses    Course[]      @relation("completed", fields: [completedCoursesIDs], references: [id])
  completedCoursesIDs String[]
  enrolledCourses     Course[]      @relation("enrolled", fields: [enrolledCoursesIDs], references: [id])
  enrolledCoursesIDs  String[]
  grades              CourseGrade[] @relation("student")
  gradesIDs           String[]
  semester            Int
  createdAt           DateTime      @default(now())
}

model Lecturer {
  id                 String   @id @default(cuid()) @map("_id")
  lecturerID         String   @unique
  firstName          String
  lastName           String
  email              String   @unique
  password           String
  assignedCourses    Course[] @relation("assigned", fields: [assignedCoursesIDs], references: [id])
  assignedCoursesIDs String[]
  role               Role     @default(TEACHER)
  createdAt          DateTime @default(now())
}

model Course {
  id                    String        @id @default(cuid()) @map("_id")
  name                  String
  completedByStudent    Student[]     @relation("completed", fields: [completedByStudentIDs], references: [id])
  completedByStudentIDs String[]
  enrolledByStudent     Student[]     @relation("enrolled", fields: [enrolledByStudentIDs], references: [id])
  enrolledByStudentIDs  String[]
  lecturer              Lecturer[]    @relation("assigned", fields: [lecturerIDs], references: [id])
  lecturerIDs           String[]      
  available             Boolean
  onYear                AcademicYear
  courseGrades          CourseGrade[] @relation("course")
}

model CourseGrade {
  id         String  @id @default(cuid()) @map("_id")
  course     Course  @relation("course", fields: [courseID], references: [id])
  courseID   String  
  student    Student @relation("student", fields: [studentID], references: [id])
  studentID  String  
  midTerm    Float
  finalExam  Float
  finalScore Float
  grade      String

  @@unique([courseID, studentID])
}